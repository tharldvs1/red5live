<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="400"
			   minHeight="320"
			   applicationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flash.display.*;
			import flash.events.*;
			import flash.media.Camera;
			import flash.media.Video;
			import flash.net.*;
			import flash.utils.*;

			import mx.controls.Alert;

			import org.osmf.events.TimeEvent;

			import spark.components.VideoDisplay;
			import spark.components.VideoPlayer;

			private var nc:NetConnection;
			private var ns:NetStream;
			private var video:Video;

			private var videoDisplay:VideoDisplay=new VideoDisplay(); //live
			private var videoPlayer:VideoPlayer=new VideoPlayer(); //http
			private var timer:Timer=new Timer(2000); //nc连成功后
			private var connectTimer:Timer=new Timer(5000); //轮询

			private function init():void
			{
				nc=new NetConnection();
				nc.addEventListener(NetStatusEvent.NET_STATUS, connectHandler);
				nc.client=this;
				nc.connect(Statics.streamServerPath());

				timer.addEventListener(TimerEvent.TIMER, timerHandler);
				connectTimer.addEventListener(TimerEvent.TIMER, connectTimerHandler);
			}



			private function connectHandler(evt:NetStatusEvent):void
			{

				/**
				 * NetStream.Play.UnpublishNotify  发布取消
				 *
				 */

				//Test.t(evt.info.code);

				if (evt.info.code == "NetConnection.Connect.Success")
				{
					ns=new NetStream(nc);

					var _client:Object=new Object();
					_client.onMetaData=onMetaData;
					ns.client=_client;

					ns.addEventListener(NetStatusEvent.NET_STATUS, connectHandler);

					video=new Video();
					video.width=Statics.clientWidth;
					video.height=Statics.clientHeight;
					video.attachNetStream(ns);
					videoDisplay.addChild(video);
					ns.play(Statics.streamNAME, -2); //-2：先实时后录制，-1：实时

					timer.start();


				}
				else if (evt.info.code == "NetConnection.Connect.Failed")
				{
					//连接失败，播放http内容
					switchPlay(1);
				}
				else if (evt.info.code == "NetStream.Play.UnpublishNotify") //发布取消
				{
					alertText.visible=true;
				}
				else if (evt.info.code == "NetStream.Play.PublishNotify") //发布恢复
				{
					alertText.visible=false;
				}
				else
				{
					Test.t(evt.info.code);
				}
			}

			private function timerHandler(event:TimerEvent):void
			{
				timer.stop();
				switchPlay(0);
			}

			private function connectTimerHandler(event:TimerEvent):void
			{
				Test.t(5);
				nc.connect(Statics.streamServerPath());
			}


			public function onBWDone():void
			{
			}



			private function onMetaData(data:Object):void
			{
				//trace("metadata: duration=" + data.duration + " width=" + data.width + " height=" + data.height + " framerate=" + data.framerate);
				timer.stop();
				stopHandler();
				switchPlay(1);
			}


			private function stopHandler():void
			{
				ns.close();
				video.attachNetStream(null);
				videoDisplay.removeChild(video);
				//Alert.show("直播暂停，请刷新后重试");
			}


			private function switchPlay(_no:int):void //0:live，1:http
			{
				if (mainContainer.numElements > 0)
				{
					if (mainContainer.getElementAt(0) is VideoPlayer && _no == 0)
					{
						for (var i:int=mainContainer.numElements - 1; i > -1; i--)
						{
							mainContainer.removeElementAt(i);
						}
						
						if (_no == 0)
						{
							alertText.visible=false;
							
							mainContainer.addElement(videoDisplay);
							
							connectTimer.stop();
						}
					}
					else
					{
					}
				}
				else
				{
					if (_no == 0)
					{
						alertText.visible=false;

						mainContainer.addElement(videoDisplay);

						connectTimer.stop();
					}
					else if (_no == 1)
					{
						alertText.visible=true;

						mainContainer.addElement(videoPlayer);
						videoPlayer.width=400;
						videoPlayer.height=300;
						videoPlayer.autoPlay=true;
						videoPlayer.loop=true;
						videoPlayer.source=Statics.defaultVideoPath;

						connectTimer.start();
					}
				}

			}
			
			
			
			
			
			
			
		]]>
	</fx:Script>


	<s:Group id="mainContainer"/>
	<s:Group y="306">
		<s:Label id="alertText"
				 text="请耐心等待或稍后刷新页面"/>
	</s:Group>



</s:Application>
