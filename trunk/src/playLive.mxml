<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="400"
			   minHeight="320"
			   applicationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flash.display.*;
			import flash.events.*;
			import flash.media.Camera;
			import flash.media.Video;
			import flash.net.*;
			import flash.utils.*;
			
			import mx.controls.Alert;
			import mx.events.ResizeEvent;
			
			import org.osmf.events.LoadEvent;
			import org.osmf.events.MediaPlayerStateChangeEvent;
			import org.osmf.events.TimeEvent;
			
			import spark.components.VideoDisplay;
			import spark.components.VideoPlayer;

			private var nc:NetConnection;
			private var ns:NetStream;
			private var video:Video;

			private var videoDisplay:VideoDisplay=new VideoDisplay(); //live
			private var videoPlayer:VideoPlayer=new VideoPlayer(); //http
			private var timer:Timer=new Timer(2000); //nc连成功后
			private var connectTimer:Timer=new Timer(5000); //轮询
			private var fullScreen:Boolean = false;

			private function init():void
			{
				nc=new NetConnection();
				nc.addEventListener(NetStatusEvent.NET_STATUS, connectHandler);
				nc.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncHandler);
				nc.addEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);
				nc.client=this;
				nc.connect(Statics.streamServerPath());

				timer.addEventListener(TimerEvent.TIMER, timerHandler);
				connectTimer.addEventListener(TimerEvent.TIMER, connectTimerHandler);
			}



			private function connectHandler(evt:NetStatusEvent):void
			{

				/**
				 * NetStream.Play.UnpublishNotify  发布取消
				 *
				 */

				Test.t(evt.info.code);

				if (evt.info.code == "NetConnection.Connect.Success")
				{
					ns=new NetStream(nc);

					var _client:Object=new Object();
					_client.onMetaData=onMetaData;
					ns.client=_client;

					ns.addEventListener(NetStatusEvent.NET_STATUS, connectHandler);
					ns.addEventListener(IOErrorEvent.IO_ERROR, IOErrorHandler);
					ns.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncHandler);

					video=new Video();
					video.width=Statics.clientWidth;
					video.height=Statics.clientHeight;
					video.attachNetStream(ns);
					videoDisplay.addChild(video);
					ns.play(Statics.streamNAME, -2); //-2：先实时后录制，-1：实时

					timer.start();


				}
				else if (evt.info.code == "NetConnection.Connect.Failed")
				{
					//连接失败，播放http内容
					switchPlay(1);
				}
				else if (evt.info.code == "NetStream.Play.UnpublishNotify") //发布取消
				{
					alertText.visible=true;
				}
				else if (evt.info.code == "NetStream.Play.PublishNotify") //发布恢复
				{
					alertText.visible=false;
				}
				else if(evt.info.code == "NetStream.Play.InsufficientBW")
				{
					alertText.visible=true;
					Test.t("带宽不足无法正常播放");
				}
				else
				{
					//Test.t(evt.info.code);
				}
			}

			private function timerHandler(event:TimerEvent):void
			{
				timer.stop();
				if(video.videoWidth == 0) //无flv，无直播流
				{
					switchPlay(1);
				}
				else //无flv，有直播流
				{
					switchPlay(0);
				}
			}

			private function connectTimerHandler(event:TimerEvent):void
			{
				nc.connect(Statics.streamServerPath());
			}


			public function onBWDone():void
			{
			}


			
			
			private function IOErrorHandler(event:IOErrorEvent):void
			{
				Test.t("IOErrorEvent : "+event);
			}
			private function asyncHandler(event:AsyncErrorEvent):void
			{
				Test.t("AsyncErrorEvent : "+event);
			}
			
			
			
			

			private function onMetaData(data:Object):void
			{
				//trace("metadata: duration=" + data.duration + " width=" + data.width + " height=" + data.height + " framerate=" + data.framerate);
				timer.stop();
				stopHandler();
				switchPlay(1);
			}


			private function stopHandler():void
			{
				ns.close();
				video.attachNetStream(null);
				videoDisplay.removeChild(video);
				//Alert.show("直播暂停，请刷新后重试");
			}


			private function switchPlay(_no:int):void //0:live，1:http
			{
				if (mainContainer.numElements > 0)
				{
					if (mainContainer.getElementAt(0) is VideoPlayer && _no == 0)
					{
						CleanContainer.clean(mainContainer);
						doSwitchPlay(_no);
					}
					else if (mainContainer.getElementAt(0) is VideoDisplay && _no == 1)
					{
						CleanContainer.clean(mainContainer);
						doSwitchPlay(_no);
					}
					else
					{
						//Test.t("啥也不做");
					}
				}
				else
				{
					//if(VideoPlayer不是全屏)，是全屏什么也不做
					if(!fullScreen)doSwitchPlay(_no);
				}

			}
			private function doSwitchPlay(_no:int):void //只供switchPlay调用
			{
				if (_no == 0)
				{
					alertText.visible=false;
					
					mainContainer.addElement(videoDisplay);
					
					connectTimer.stop();
				}
				else if (_no == 1)
				{
					alertText.visible=true;
					
					mainContainer.addElement(videoPlayer);
					videoPlayer.width=Statics.clientWidth;
					videoPlayer.height=Statics.clientHeight;
					videoPlayer.autoPlay=true;
					videoPlayer.loop=true;
					videoPlayer.source=Statics.defaultVideoPath;
					videoPlayer.addEventListener(MediaPlayerStateChangeEvent.MEDIA_PLAYER_STATE_CHANGE, videoPlayerStateHandler);
					videoPlayer.addEventListener(LoadEvent.BYTES_LOADED_CHANGE, videoPlayerLoadedHandler);
					videoPlayer.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, videoPlayerTimeHandler);
					videoPlayer.addEventListener(TimeEvent.DURATION_CHANGE, videoPlayerTimeHandler);
					videoPlayer.addEventListener(ResizeEvent.RESIZE, resizeHandler);
					
					connectTimer.start();
				}
			}
			
			
			
			private function videoPlayerStateHandler(event:MediaPlayerStateChangeEvent):void
			{
				//Test.t("MEDIA_PLAYER_STATE_CHANGE : "+event.state);
			}
			private function videoPlayerLoadedHandler(event:LoadEvent):void
			{
				//Test.t("BYTES_LOADED_CHANGE : "+event.bytes);
			}
			private function videoPlayerTimeHandler(event:TimeEvent):void
			{
				//Test.t("TimeEvent : "+event);
			}
			private function resizeHandler(event:ResizeEvent):void
			{
				//Test.t("event.oldWidth = "+event.oldWidth);//之前是400，就是全屏
				
				if(event.oldWidth == Statics.clientWidth)
				{
					//现在是全屏
					fullScreen = true;
				}
				else
				{
					fullScreen = false;
				}
				
			}
			
			
		]]>
	</fx:Script>


	<s:Group id="mainContainer"/>
	<s:Group y="306">
		<s:Label id="alertText"
				 text="请耐心等待或稍后刷新页面"/>
	</s:Group>



</s:Application>
